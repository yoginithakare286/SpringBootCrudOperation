package com.yts.revaux.ntquote.domain;

import static com.yts.revaux.ntquote.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class NtQuotePartInformationMasterAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuotePartInformationMasterAllPropertiesEquals(
        NtQuotePartInformationMaster expected,
        NtQuotePartInformationMaster actual
    ) {
        assertNtQuotePartInformationMasterAutoGeneratedPropertiesEquals(expected, actual);
        assertNtQuotePartInformationMasterAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuotePartInformationMasterAllUpdatablePropertiesEquals(
        NtQuotePartInformationMaster expected,
        NtQuotePartInformationMaster actual
    ) {
        assertNtQuotePartInformationMasterUpdatableFieldsEquals(expected, actual);
        assertNtQuotePartInformationMasterUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuotePartInformationMasterAutoGeneratedPropertiesEquals(
        NtQuotePartInformationMaster expected,
        NtQuotePartInformationMaster actual
    ) {
        assertThat(expected)
            .as("Verify NtQuotePartInformationMaster auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuotePartInformationMasterUpdatableFieldsEquals(
        NtQuotePartInformationMaster expected,
        NtQuotePartInformationMaster actual
    ) {
        assertThat(expected)
            .as("Verify NtQuotePartInformationMaster relevant properties")
            .satisfies(e -> assertThat(e.getSrNo()).as("check srNo").isEqualTo(actual.getSrNo()))
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e ->
                assertThat(e.getMaterialDescription()).as("check materialDescription").isEqualTo(actual.getMaterialDescription())
            )
            .satisfies(e -> assertThat(e.getPartNumber()).as("check partNumber").isEqualTo(actual.getPartNumber()))
            .satisfies(e -> assertThat(e.getCadFile()).as("check cadFile").isEqualTo(actual.getCadFile()))
            .satisfies(e -> assertThat(e.getEau()).as("check eau").isEqualTo(actual.getEau()))
            .satisfies(e -> assertThat(e.getPartWeight()).as("check partWeight").isEqualTo(actual.getPartWeight()))
            .satisfies(e -> assertThat(e.getMaterialType()).as("check materialType").isEqualTo(actual.getMaterialType()))
            .satisfies(e ->
                assertThat(e.getMaterialCost())
                    .as("check materialCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getMaterialCost())
            )
            .satisfies(e ->
                assertThat(e.getExtendedMaterialCostPer())
                    .as("check extendedMaterialCostPer")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getExtendedMaterialCostPer())
            )
            .satisfies(e ->
                assertThat(e.getExternalMachineCostPer())
                    .as("check externalMachineCostPer")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getExternalMachineCostPer())
            )
            .satisfies(e ->
                assertThat(e.getPurchaseComponentCost())
                    .as("check purchaseComponentCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPurchaseComponentCost())
            )
            .satisfies(e ->
                assertThat(e.getSecondaryExternalOperationCost())
                    .as("check secondaryExternalOperationCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getSecondaryExternalOperationCost())
            )
            .satisfies(e ->
                assertThat(e.getOverhead()).as("check overhead").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getOverhead())
            )
            .satisfies(e ->
                assertThat(e.getPackLogisticCostPer())
                    .as("check packLogisticCostPer")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPackLogisticCostPer())
            )
            .satisfies(e -> assertThat(e.getMachineSizeTons()).as("check machineSizeTons").isEqualTo(actual.getMachineSizeTons()))
            .satisfies(e -> assertThat(e.getNumberOfCavities()).as("check numberOfCavities").isEqualTo(actual.getNumberOfCavities()))
            .satisfies(e -> assertThat(e.getCycleTime()).as("check cycleTime").isEqualTo(actual.getCycleTime()))
            .satisfies(e ->
                assertThat(e.getPerUnit()).as("check perUnit").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPerUnit())
            )
            .satisfies(e ->
                assertThat(e.getTotalPricePerChina())
                    .as("check totalPricePerChina")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTotalPricePerChina())
            )
            .satisfies(e ->
                assertThat(e.getTotalPriceBudget())
                    .as("check totalPriceBudget")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTotalPriceBudget())
            )
            .satisfies(e ->
                assertThat(e.getGrainBudget())
                    .as("check grainBudget")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getGrainBudget())
            )
            .satisfies(e ->
                assertThat(e.getDogatingFixtureBudget())
                    .as("check dogatingFixtureBudget")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getDogatingFixtureBudget())
            )
            .satisfies(e ->
                assertThat(e.getGaugeBudget())
                    .as("check gaugeBudget")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getGaugeBudget())
            )
            .satisfies(e -> assertThat(e.getEoat()).as("check eoat").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getEoat()))
            .satisfies(e ->
                assertThat(e.getChinaTariffBudget())
                    .as("check chinaTariffBudget")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getChinaTariffBudget())
            )
            .satisfies(e ->
                assertThat(e.getTotalToolingBudget())
                    .as("check totalToolingBudget")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTotalToolingBudget())
            )
            .satisfies(e -> assertThat(e.getLeadTime()).as("check leadTime").isEqualTo(actual.getLeadTime()))
            .satisfies(e -> assertThat(e.getToolingNotes()).as("check toolingNotes").isEqualTo(actual.getToolingNotes()))
            .satisfies(e -> assertThat(e.getPartDescription()).as("check partDescription").isEqualTo(actual.getPartDescription()))
            .satisfies(e -> assertThat(e.getJobId()).as("check jobId").isEqualTo(actual.getJobId()))
            .satisfies(e -> assertThat(e.getMoldId()).as("check moldId").isEqualTo(actual.getMoldId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedDate()).as("check updatedDate").isEqualTo(actual.getUpdatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuotePartInformationMasterUpdatableRelationshipsEquals(
        NtQuotePartInformationMaster expected,
        NtQuotePartInformationMaster actual
    ) {
        assertThat(expected)
            .as("Verify NtQuotePartInformationMaster relationships")
            .satisfies(e -> assertThat(e.getNtQuote()).as("check ntQuote").isEqualTo(actual.getNtQuote()));
    }
}
