package com.yts.revaux.ntquote.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RevAuxUserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRevAuxUserAllPropertiesEquals(RevAuxUser expected, RevAuxUser actual) {
        assertRevAuxUserAutoGeneratedPropertiesEquals(expected, actual);
        assertRevAuxUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRevAuxUserAllUpdatablePropertiesEquals(RevAuxUser expected, RevAuxUser actual) {
        assertRevAuxUserUpdatableFieldsEquals(expected, actual);
        assertRevAuxUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertRevAuxUserMapsIdRelationshipPersistedValue(RevAuxUser entityToPersist, RevAuxUser persisted) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getInternalUser().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRevAuxUserAutoGeneratedPropertiesEquals(RevAuxUser expected, RevAuxUser actual) {
        assertThat(expected)
            .as("Verify RevAuxUser auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRevAuxUserUpdatableFieldsEquals(RevAuxUser expected, RevAuxUser actual) {
        assertThat(expected)
            .as("Verify RevAuxUser relevant properties")
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getPincode()).as("check pincode").isEqualTo(actual.getPincode()))
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getPreferredLanguage()).as("check preferredLanguage").isEqualTo(actual.getPreferredLanguage()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRevAuxUserUpdatableRelationshipsEquals(RevAuxUser expected, RevAuxUser actual) {
        // empty method
    }
}
