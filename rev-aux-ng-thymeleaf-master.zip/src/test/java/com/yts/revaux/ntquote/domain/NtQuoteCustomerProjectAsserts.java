package com.yts.revaux.ntquote.domain;

import static com.yts.revaux.ntquote.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class NtQuoteCustomerProjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteCustomerProjectAllPropertiesEquals(NtQuoteCustomerProject expected, NtQuoteCustomerProject actual) {
        assertNtQuoteCustomerProjectAutoGeneratedPropertiesEquals(expected, actual);
        assertNtQuoteCustomerProjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteCustomerProjectAllUpdatablePropertiesEquals(
        NtQuoteCustomerProject expected,
        NtQuoteCustomerProject actual
    ) {
        assertNtQuoteCustomerProjectUpdatableFieldsEquals(expected, actual);
        assertNtQuoteCustomerProjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteCustomerProjectAutoGeneratedPropertiesEquals(
        NtQuoteCustomerProject expected,
        NtQuoteCustomerProject actual
    ) {
        assertThat(expected)
            .as("Verify NtQuoteCustomerProject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteCustomerProjectUpdatableFieldsEquals(NtQuoteCustomerProject expected, NtQuoteCustomerProject actual) {
        assertThat(expected)
            .as("Verify NtQuoteCustomerProject relevant properties")
            .satisfies(e -> assertThat(e.getSrNo()).as("check srNo").isEqualTo(actual.getSrNo()))
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e -> assertThat(e.getQsf()).as("check qsf").isEqualTo(actual.getQsf()))
            .satisfies(e -> assertThat(e.getRev()).as("check rev").isEqualTo(actual.getRev()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getCustomerName()).as("check customerName").isEqualTo(actual.getCustomerName()))
            .satisfies(e -> assertThat(e.getContactName()).as("check contactName").isEqualTo(actual.getContactName()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e ->
                assertThat(e.getOverallProjectRiskEvaluation())
                    .as("check overallProjectRiskEvaluation")
                    .isEqualTo(actual.getOverallProjectRiskEvaluation())
            )
            .satisfies(e ->
                assertThat(e.getAssessmentDate())
                    .as("check assessmentDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getAssessmentDate())
            )
            .satisfies(e ->
                assertThat(e.getReAssessmentDate())
                    .as("check reAssessmentDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getReAssessmentDate())
            )
            .satisfies(e -> assertThat(e.getProjectName()).as("check projectName").isEqualTo(actual.getProjectName()))
            .satisfies(e -> assertThat(e.getProjectInformation()).as("check projectInformation").isEqualTo(actual.getProjectInformation()))
            .satisfies(e -> assertThat(e.getProjectManager()).as("check projectManager").isEqualTo(actual.getProjectManager()))
            .satisfies(e -> assertThat(e.getProjectRequirement()).as("check projectRequirement").isEqualTo(actual.getProjectRequirement()))
            .satisfies(e -> assertThat(e.getLengthOfProject()).as("check lengthOfProject").isEqualTo(actual.getLengthOfProject()))
            .satisfies(e -> assertThat(e.getNewMold()).as("check newMold").isEqualTo(actual.getNewMold()))
            .satisfies(e -> assertThat(e.getTransferMold()).as("check transferMold").isEqualTo(actual.getTransferMold()))
            .satisfies(e -> assertThat(e.getContactReviewDate()).as("check contactReviewDate").isEqualTo(actual.getContactReviewDate()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedDate()).as("check updatedDate").isEqualTo(actual.getUpdatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteCustomerProjectUpdatableRelationshipsEquals(
        NtQuoteCustomerProject expected,
        NtQuoteCustomerProject actual
    ) {
        assertThat(expected)
            .as("Verify NtQuoteCustomerProject relationships")
            .satisfies(e -> assertThat(e.getNtQuote()).as("check ntQuote").isEqualTo(actual.getNtQuote()));
    }
}
