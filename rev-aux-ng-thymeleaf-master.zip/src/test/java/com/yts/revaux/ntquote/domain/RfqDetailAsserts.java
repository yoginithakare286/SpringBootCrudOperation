package com.yts.revaux.ntquote.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RfqDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRfqDetailAllPropertiesEquals(RfqDetail expected, RfqDetail actual) {
        assertRfqDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertRfqDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRfqDetailAllUpdatablePropertiesEquals(RfqDetail expected, RfqDetail actual) {
        assertRfqDetailUpdatableFieldsEquals(expected, actual);
        assertRfqDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRfqDetailAutoGeneratedPropertiesEquals(RfqDetail expected, RfqDetail actual) {
        assertThat(expected)
            .as("Verify RfqDetail auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRfqDetailUpdatableFieldsEquals(RfqDetail expected, RfqDetail actual) {
        assertThat(expected)
            .as("Verify RfqDetail relevant properties")
            .satisfies(e -> assertThat(e.getSrNo()).as("check srNo").isEqualTo(actual.getSrNo()))
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e -> assertThat(e.getRfqId()).as("check rfqId").isEqualTo(actual.getRfqId()))
            .satisfies(e -> assertThat(e.getOrderDate()).as("check orderDate").isEqualTo(actual.getOrderDate()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getItemDescription()).as("check itemDescription").isEqualTo(actual.getItemDescription()))
            .satisfies(e -> assertThat(e.getRfqStatus()).as("check rfqStatus").isEqualTo(actual.getRfqStatus()))
            .satisfies(e -> assertThat(e.getRfqType()).as("check rfqType").isEqualTo(actual.getRfqType()))
            .satisfies(e -> assertThat(e.getCustomer()).as("check customer").isEqualTo(actual.getCustomer()))
            .satisfies(e -> assertThat(e.getRfqReceivedDate()).as("check rfqReceivedDate").isEqualTo(actual.getRfqReceivedDate()))
            .satisfies(e -> assertThat(e.getQuoteDueDate()).as("check quoteDueDate").isEqualTo(actual.getQuoteDueDate()))
            .satisfies(e -> assertThat(e.getPart()).as("check part").isEqualTo(actual.getPart()))
            .satisfies(e -> assertThat(e.getBuyer()).as("check buyer").isEqualTo(actual.getBuyer()))
            .satisfies(e -> assertThat(e.getExpectedLaunch()).as("check expectedLaunch").isEqualTo(actual.getExpectedLaunch()))
            .satisfies(e -> assertThat(e.getRequestor()).as("check requestor").isEqualTo(actual.getRequestor()))
            .satisfies(e -> assertThat(e.getRaStatus()).as("check raStatus").isEqualTo(actual.getRaStatus()))
            .satisfies(e -> assertThat(e.getIsDelete()).as("check isDelete").isEqualTo(actual.getIsDelete()))
            .satisfies(e -> assertThat(e.getCustomerFeedback()).as("check customerFeedback").isEqualTo(actual.getCustomerFeedback()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRfqDetailUpdatableRelationshipsEquals(RfqDetail expected, RfqDetail actual) {
        // empty method
    }
}
