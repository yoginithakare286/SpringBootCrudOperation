package com.yts.revaux.ntquote.domain;

import static com.yts.revaux.ntquote.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class NtQuoteCustomerInputOutputVersionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteCustomerInputOutputVersionAllPropertiesEquals(
        NtQuoteCustomerInputOutputVersion expected,
        NtQuoteCustomerInputOutputVersion actual
    ) {
        assertNtQuoteCustomerInputOutputVersionAutoGeneratedPropertiesEquals(expected, actual);
        assertNtQuoteCustomerInputOutputVersionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteCustomerInputOutputVersionAllUpdatablePropertiesEquals(
        NtQuoteCustomerInputOutputVersion expected,
        NtQuoteCustomerInputOutputVersion actual
    ) {
        assertNtQuoteCustomerInputOutputVersionUpdatableFieldsEquals(expected, actual);
        assertNtQuoteCustomerInputOutputVersionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteCustomerInputOutputVersionAutoGeneratedPropertiesEquals(
        NtQuoteCustomerInputOutputVersion expected,
        NtQuoteCustomerInputOutputVersion actual
    ) {
        assertThat(expected)
            .as("Verify NtQuoteCustomerInputOutputVersion auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteCustomerInputOutputVersionUpdatableFieldsEquals(
        NtQuoteCustomerInputOutputVersion expected,
        NtQuoteCustomerInputOutputVersion actual
    ) {
        assertThat(expected)
            .as("Verify NtQuoteCustomerInputOutputVersion relevant properties")
            .satisfies(e -> assertThat(e.getSrNo()).as("check srNo").isEqualTo(actual.getSrNo()))
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e ->
                assertThat(e.getMaterialDescription()).as("check materialDescription").isEqualTo(actual.getMaterialDescription())
            )
            .satisfies(e -> assertThat(e.getPartNumber()).as("check partNumber").isEqualTo(actual.getPartNumber()))
            .satisfies(e -> assertThat(e.getMaterialId()).as("check materialId").isEqualTo(actual.getMaterialId()))
            .satisfies(e -> assertThat(e.getSupplier()).as("check supplier").isEqualTo(actual.getSupplier()))
            .satisfies(e -> assertThat(e.getEstAnnualVolume()).as("check estAnnualVolume").isEqualTo(actual.getEstAnnualVolume()))
            .satisfies(e ->
                assertThat(e.getEstProductionRunYrs()).as("check estProductionRunYrs").isEqualTo(actual.getEstProductionRunYrs())
            )
            .satisfies(e ->
                assertThat(e.getMaterialCostLb())
                    .as("check materialCostLb")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getMaterialCostLb())
            )
            .satisfies(e ->
                assertThat(e.getPartWeightLb())
                    .as("check partWeightLb")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPartWeightLb())
            )
            .satisfies(e ->
                assertThat(e.getRunnerWeightLb())
                    .as("check runnerWeightLb")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getRunnerWeightLb())
            )
            .satisfies(e -> assertThat(e.getMachineSize()).as("check machineSize").isEqualTo(actual.getMachineSize()))
            .satisfies(e ->
                assertThat(e.getMachineRate())
                    .as("check machineRate")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getMachineRate())
            )
            .satisfies(e ->
                assertThat(e.getScrapRate()).as("check scrapRate").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getScrapRate())
            )
            .satisfies(e ->
                assertThat(e.getMachineEfficiency())
                    .as("check machineEfficiency")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getMachineEfficiency())
            )
            .satisfies(e -> assertThat(e.getFte()).as("check fte").isEqualTo(actual.getFte()))
            .satisfies(e ->
                assertThat(e.getLaborRate()).as("check laborRate").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getLaborRate())
            )
            .satisfies(e -> assertThat(e.getNumberOfCavities()).as("check numberOfCavities").isEqualTo(actual.getNumberOfCavities()))
            .satisfies(e -> assertThat(e.getCycleTime()).as("check cycleTime").isEqualTo(actual.getCycleTime()))
            .satisfies(e ->
                assertThat(e.getPurchaseComponentCostPart())
                    .as("check purchaseComponentCostPart")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPurchaseComponentCostPart())
            )
            .satisfies(e ->
                assertThat(e.getSecondaryOperationExternalProcess())
                    .as("check secondaryOperationExternalProcess")
                    .isEqualTo(actual.getSecondaryOperationExternalProcess())
            )
            .satisfies(e ->
                assertThat(e.getSecondaryOperationLaborRate())
                    .as("check secondaryOperationLaborRate")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getSecondaryOperationLaborRate())
            )
            .satisfies(e ->
                assertThat(e.getSecondaryOperationMachineRate())
                    .as("check secondaryOperationMachineRate")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getSecondaryOperationMachineRate())
            )
            .satisfies(e ->
                assertThat(e.getSecondaryOperationCycleTime())
                    .as("check secondaryOperationCycleTime")
                    .isEqualTo(actual.getSecondaryOperationCycleTime())
            )
            .satisfies(e ->
                assertThat(e.getExternalOperationRate())
                    .as("check externalOperationRate")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getExternalOperationRate())
            )
            .satisfies(e ->
                assertThat(e.getPreventativeMaintenanceFrequency())
                    .as("check preventativeMaintenanceFrequency")
                    .isEqualTo(actual.getPreventativeMaintenanceFrequency())
            )
            .satisfies(e ->
                assertThat(e.getPreventativeMaintenanceCost())
                    .as("check preventativeMaintenanceCost")
                    .isEqualTo(actual.getPreventativeMaintenanceCost())
            )
            .satisfies(e ->
                assertThat(e.getTargetProfit())
                    .as("check targetProfit")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTargetProfit())
            )
            .satisfies(e ->
                assertThat(e.getTargetMaterialMarkup())
                    .as("check targetMaterialMarkup")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTargetMaterialMarkup())
            )
            .satisfies(e ->
                assertThat(e.getActualMaterialCost())
                    .as("check actualMaterialCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getActualMaterialCost())
            )
            .satisfies(e ->
                assertThat(e.getPartPerHours())
                    .as("check partPerHours")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPartPerHours())
            )
            .satisfies(e ->
                assertThat(e.getEstLotSize()).as("check estLotSize").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getEstLotSize())
            )
            .satisfies(e ->
                assertThat(e.getSetupHours()).as("check setupHours").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getSetupHours())
            )
            .satisfies(e ->
                assertThat(e.getExternalOperationCostPer())
                    .as("check externalOperationCostPer")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getExternalOperationCostPer())
            )
            .satisfies(e ->
                assertThat(e.getExternalMachineCostPer())
                    .as("check externalMachineCostPer")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getExternalMachineCostPer())
            )
            .satisfies(e ->
                assertThat(e.getExtendedLaborCostPer())
                    .as("check extendedLaborCostPer")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getExtendedLaborCostPer())
            )
            .satisfies(e ->
                assertThat(e.getExtendedMaterialCostPer())
                    .as("check extendedMaterialCostPer")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getExtendedMaterialCostPer())
            )
            .satisfies(e ->
                assertThat(e.getPackLogisticCostPer())
                    .as("check packLogisticCostPer")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPackLogisticCostPer())
            )
            .satisfies(e ->
                assertThat(e.getTotalProductionCost())
                    .as("check totalProductionCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTotalProductionCost())
            )
            .satisfies(e ->
                assertThat(e.getTotalMaterialCost())
                    .as("check totalMaterialCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTotalMaterialCost())
            )
            .satisfies(e ->
                assertThat(e.getTotalCostSgaProfit())
                    .as("check totalCostSgaProfit")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTotalCostSgaProfit())
            )
            .satisfies(e ->
                assertThat(e.getSgaRate()).as("check sgaRate").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getSgaRate())
            )
            .satisfies(e -> assertThat(e.getProfit()).as("check profit").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getProfit()))
            .satisfies(e ->
                assertThat(e.getPartPrice()).as("check partPrice").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPartPrice())
            )
            .satisfies(e ->
                assertThat(e.getTotalCost()).as("check totalCost").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTotalCost())
            )
            .satisfies(e ->
                assertThat(e.getTotalSales()).as("check totalSales").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTotalSales())
            )
            .satisfies(e ->
                assertThat(e.getTotalProfit())
                    .as("check totalProfit")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTotalProfit())
            )
            .satisfies(e ->
                assertThat(e.getCostMaterial())
                    .as("check costMaterial")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getCostMaterial())
            )
            .satisfies(e ->
                assertThat(e.getTotalContributionMargin())
                    .as("check totalContributionMargin")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTotalContributionMargin())
            )
            .satisfies(e ->
                assertThat(e.getContributionMargin())
                    .as("check contributionMargin")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getContributionMargin())
            )
            .satisfies(e ->
                assertThat(e.getMaterialContributionMargin())
                    .as("check materialContributionMargin")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getMaterialContributionMargin())
            )
            .satisfies(e -> assertThat(e.getVersion()).as("check version").isEqualTo(actual.getVersion()))
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedDate()).as("check updatedDate").isEqualTo(actual.getUpdatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteCustomerInputOutputVersionUpdatableRelationshipsEquals(
        NtQuoteCustomerInputOutputVersion expected,
        NtQuoteCustomerInputOutputVersion actual
    ) {
        assertThat(expected)
            .as("Verify NtQuoteCustomerInputOutputVersion relationships")
            .satisfies(e -> assertThat(e.getNtQuote()).as("check ntQuote").isEqualTo(actual.getNtQuote()));
    }
}
