package com.yts.revaux.ntquote.domain;

import static com.yts.revaux.ntquote.domain.AssertUtils.bigDecimalCompareTo;
import static com.yts.revaux.ntquote.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class BuyerRfqPricesDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyerRfqPricesDetailAllPropertiesEquals(BuyerRfqPricesDetail expected, BuyerRfqPricesDetail actual) {
        assertBuyerRfqPricesDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertBuyerRfqPricesDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyerRfqPricesDetailAllUpdatablePropertiesEquals(BuyerRfqPricesDetail expected, BuyerRfqPricesDetail actual) {
        assertBuyerRfqPricesDetailUpdatableFieldsEquals(expected, actual);
        assertBuyerRfqPricesDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyerRfqPricesDetailAutoGeneratedPropertiesEquals(BuyerRfqPricesDetail expected, BuyerRfqPricesDetail actual) {
        assertThat(expected)
            .as("Verify BuyerRfqPricesDetail auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyerRfqPricesDetailUpdatableFieldsEquals(BuyerRfqPricesDetail expected, BuyerRfqPricesDetail actual) {
        assertThat(expected)
            .as("Verify BuyerRfqPricesDetail relevant properties")
            .satisfies(e -> assertThat(e.getSrNo()).as("check srNo").isEqualTo(actual.getSrNo()))
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e -> assertThat(e.getLine()).as("check line").isEqualTo(actual.getLine()))
            .satisfies(e -> assertThat(e.getMaterialId()).as("check materialId").isEqualTo(actual.getMaterialId()))
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(e ->
                assertThat(e.getEstUnitPrice())
                    .as("check estUnitPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getEstUnitPrice())
            )
            .satisfies(e ->
                assertThat(e.getActUnitPrice())
                    .as("check actUnitPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getActUnitPrice())
            )
            .satisfies(e -> assertThat(e.getAwardFlag()).as("check awardFlag").isEqualTo(actual.getAwardFlag()))
            .satisfies(e -> assertThat(e.getQuoteId()).as("check quoteId").isEqualTo(actual.getQuoteId()))
            .satisfies(e ->
                assertThat(e.getReceivedDate())
                    .as("check receivedDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getReceivedDate())
            )
            .satisfies(e ->
                assertThat(e.getLeadDays()).as("check leadDays").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getLeadDays())
            )
            .satisfies(e -> assertThat(e.getRank()).as("check rank").isEqualTo(actual.getRank()))
            .satisfies(e -> assertThat(e.getSplitQuantityFlag()).as("check splitQuantityFlag").isEqualTo(actual.getSplitQuantityFlag()))
            .satisfies(e ->
                assertThat(e.getMaterialDescription()).as("check materialDescription").isEqualTo(actual.getMaterialDescription())
            )
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()))
            .satisfies(e -> assertThat(e.getInviteRaFlag()).as("check inviteRaFlag").isEqualTo(actual.getInviteRaFlag()))
            .satisfies(e ->
                assertThat(e.getAwardAcceptancesDate())
                    .as("check awardAcceptancesDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getAwardAcceptancesDate())
            )
            .satisfies(e ->
                assertThat(e.getOrderAcceptancesDate())
                    .as("check orderAcceptancesDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getOrderAcceptancesDate())
            )
            .satisfies(e ->
                assertThat(e.getOrderAcceptancesFlag()).as("check orderAcceptancesFlag").isEqualTo(actual.getOrderAcceptancesFlag())
            )
            .satisfies(e -> assertThat(e.getMaterialName()).as("check materialName").isEqualTo(actual.getMaterialName()))
            .satisfies(e -> assertThat(e.getMaterialImage()).as("check materialImage").isEqualTo(actual.getMaterialImage()))
            .satisfies(e ->
                assertThat(e.getTechnicalScrutinyFlag()).as("check technicalScrutinyFlag").isEqualTo(actual.getTechnicalScrutinyFlag())
            )
            .satisfies(e -> assertThat(e.getVendorAttributes()).as("check vendorAttributes").isEqualTo(actual.getVendorAttributes()))
            .satisfies(e ->
                assertThat(e.getMarginFactor())
                    .as("check marginFactor")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getMarginFactor())
            )
            .satisfies(e -> assertThat(e.getFob()).as("check fob").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getFob()))
            .satisfies(e ->
                assertThat(e.getShippingFactor())
                    .as("check shippingFactor")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getShippingFactor())
            )
            .satisfies(e ->
                assertThat(e.getFreight()).as("check freight").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getFreight())
            )
            .satisfies(e ->
                assertThat(e.getFinalShipmentCost())
                    .as("check finalShipmentCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getFinalShipmentCost())
            )
            .satisfies(e -> assertThat(e.getTariff()).as("check tariff").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTariff()))
            .satisfies(e ->
                assertThat(e.getCalculatedTariffsCost())
                    .as("check calculatedTariffsCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getCalculatedTariffsCost())
            )
            .satisfies(e ->
                assertThat(e.getTotalCumberlandPrice())
                    .as("check totalCumberlandPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTotalCumberlandPrice())
            )
            .satisfies(e ->
                assertThat(e.getLandedPrice())
                    .as("check landedPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getLandedPrice())
            )
            .satisfies(e ->
                assertThat(e.getApprovalToGain())
                    .as("check approvalToGain")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getApprovalToGain())
            )
            .satisfies(e -> assertThat(e.getMoldSizeMoldWeight()).as("check moldSizeMoldWeight").isEqualTo(actual.getMoldSizeMoldWeight()))
            .satisfies(e ->
                assertThat(e.getMoldLifeExpectancy())
                    .as("check moldLifeExpectancy")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getMoldLifeExpectancy())
            )
            .satisfies(e ->
                assertThat(e.getTotalCostComparison())
                    .as("check totalCostComparison")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTotalCostComparison())
            )
            .satisfies(e -> assertThat(e.getLength()).as("check length").isEqualTo(actual.getLength()))
            .satisfies(e -> assertThat(e.getWidth()).as("check width").isEqualTo(actual.getWidth()))
            .satisfies(e -> assertThat(e.getGuage()).as("check guage").isEqualTo(actual.getGuage()))
            .satisfies(e -> assertThat(e.getTolerance()).as("check tolerance").isEqualTo(actual.getTolerance()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyerRfqPricesDetailUpdatableRelationshipsEquals(BuyerRfqPricesDetail expected, BuyerRfqPricesDetail actual) {
        assertThat(expected)
            .as("Verify BuyerRfqPricesDetail relationships")
            .satisfies(e -> assertThat(e.getRfqDetail()).as("check rfqDetail").isEqualTo(actual.getRfqDetail()))
            .satisfies(e -> assertThat(e.getVendor()).as("check vendor").isEqualTo(actual.getVendor()));
    }
}
