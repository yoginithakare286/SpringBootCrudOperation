package com.yts.revaux.ntquote.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NtQuoteComponentDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteComponentDetailAllPropertiesEquals(NtQuoteComponentDetail expected, NtQuoteComponentDetail actual) {
        assertNtQuoteComponentDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertNtQuoteComponentDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteComponentDetailAllUpdatablePropertiesEquals(
        NtQuoteComponentDetail expected,
        NtQuoteComponentDetail actual
    ) {
        assertNtQuoteComponentDetailUpdatableFieldsEquals(expected, actual);
        assertNtQuoteComponentDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteComponentDetailAutoGeneratedPropertiesEquals(
        NtQuoteComponentDetail expected,
        NtQuoteComponentDetail actual
    ) {
        assertThat(expected)
            .as("Verify NtQuoteComponentDetail auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteComponentDetailUpdatableFieldsEquals(NtQuoteComponentDetail expected, NtQuoteComponentDetail actual) {
        assertThat(expected)
            .as("Verify NtQuoteComponentDetail relevant properties")
            .satisfies(e -> assertThat(e.getSrNo()).as("check srNo").isEqualTo(actual.getSrNo()))
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e ->
                assertThat(e.getMaterialDescription()).as("check materialDescription").isEqualTo(actual.getMaterialDescription())
            )
            .satisfies(e -> assertThat(e.getPartNumber()).as("check partNumber").isEqualTo(actual.getPartNumber()))
            .satisfies(e -> assertThat(e.getEau()).as("check eau").isEqualTo(actual.getEau()))
            .satisfies(e ->
                assertThat(e.getManufacturingLocation()).as("check manufacturingLocation").isEqualTo(actual.getManufacturingLocation())
            )
            .satisfies(e -> assertThat(e.getFobLocation()).as("check fobLocation").isEqualTo(actual.getFobLocation()))
            .satisfies(e ->
                assertThat(e.getPackingRequirements()).as("check packingRequirements").isEqualTo(actual.getPackingRequirements())
            )
            .satisfies(e -> assertThat(e.getMachineSize()).as("check machineSize").isEqualTo(actual.getMachineSize()))
            .satisfies(e -> assertThat(e.getCycleTime()).as("check cycleTime").isEqualTo(actual.getCycleTime()))
            .satisfies(e -> assertThat(e.getPartWeight()).as("check partWeight").isEqualTo(actual.getPartWeight()))
            .satisfies(e -> assertThat(e.getRunnerWeight()).as("check runnerWeight").isEqualTo(actual.getRunnerWeight()))
            .satisfies(e -> assertThat(e.getCavities()).as("check cavities").isEqualTo(actual.getCavities()))
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()))
            .satisfies(e -> assertThat(e.getRiskLevel()).as("check riskLevel").isEqualTo(actual.getRiskLevel()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedDate()).as("check updatedDate").isEqualTo(actual.getUpdatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteComponentDetailUpdatableRelationshipsEquals(
        NtQuoteComponentDetail expected,
        NtQuoteComponentDetail actual
    ) {
        assertThat(expected)
            .as("Verify NtQuoteComponentDetail relationships")
            .satisfies(e -> assertThat(e.getNtQuote()).as("check ntQuote").isEqualTo(actual.getNtQuote()))
            .satisfies(e -> assertThat(e.getMaterialPrice()).as("check materialPrice").isEqualTo(actual.getMaterialPrice()));
    }
}
