package com.yts.revaux.ntquote.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NtQuoteProjectApprovalAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteProjectApprovalAllPropertiesEquals(NtQuoteProjectApproval expected, NtQuoteProjectApproval actual) {
        assertNtQuoteProjectApprovalAutoGeneratedPropertiesEquals(expected, actual);
        assertNtQuoteProjectApprovalAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteProjectApprovalAllUpdatablePropertiesEquals(
        NtQuoteProjectApproval expected,
        NtQuoteProjectApproval actual
    ) {
        assertNtQuoteProjectApprovalUpdatableFieldsEquals(expected, actual);
        assertNtQuoteProjectApprovalUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteProjectApprovalAutoGeneratedPropertiesEquals(
        NtQuoteProjectApproval expected,
        NtQuoteProjectApproval actual
    ) {
        assertThat(expected)
            .as("Verify NtQuoteProjectApproval auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteProjectApprovalUpdatableFieldsEquals(NtQuoteProjectApproval expected, NtQuoteProjectApproval actual) {
        assertThat(expected)
            .as("Verify NtQuoteProjectApproval relevant properties")
            .satisfies(e -> assertThat(e.getSrNo()).as("check srNo").isEqualTo(actual.getSrNo()))
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e -> assertThat(e.getApprovedBy()).as("check approvedBy").isEqualTo(actual.getApprovedBy()))
            .satisfies(e -> assertThat(e.getApprovalDate()).as("check approvalDate").isEqualTo(actual.getApprovalDate()))
            .satisfies(e -> assertThat(e.getProgramManager()).as("check programManager").isEqualTo(actual.getProgramManager()))
            .satisfies(e -> assertThat(e.getEngineering()).as("check engineering").isEqualTo(actual.getEngineering()))
            .satisfies(e -> assertThat(e.getQuality()).as("check quality").isEqualTo(actual.getQuality()))
            .satisfies(e -> assertThat(e.getMaterials()).as("check materials").isEqualTo(actual.getMaterials()))
            .satisfies(e -> assertThat(e.getPlantManager()).as("check plantManager").isEqualTo(actual.getPlantManager()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedDate()).as("check updatedDate").isEqualTo(actual.getUpdatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNtQuoteProjectApprovalUpdatableRelationshipsEquals(
        NtQuoteProjectApproval expected,
        NtQuoteProjectApproval actual
    ) {
        // empty method
    }
}
