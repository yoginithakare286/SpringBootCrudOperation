package com.yts.revaux.ntquote.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PermissionMasterAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPermissionMasterAllPropertiesEquals(PermissionMaster expected, PermissionMaster actual) {
        assertPermissionMasterAutoGeneratedPropertiesEquals(expected, actual);
        assertPermissionMasterAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPermissionMasterAllUpdatablePropertiesEquals(PermissionMaster expected, PermissionMaster actual) {
        assertPermissionMasterUpdatableFieldsEquals(expected, actual);
        assertPermissionMasterUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPermissionMasterAutoGeneratedPropertiesEquals(PermissionMaster expected, PermissionMaster actual) {
        assertThat(expected)
            .as("Verify PermissionMaster auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPermissionMasterUpdatableFieldsEquals(PermissionMaster expected, PermissionMaster actual) {
        assertThat(expected)
            .as("Verify PermissionMaster relevant properties")
            .satisfies(e -> assertThat(e.getPermissionGroup()).as("check permissionGroup").isEqualTo(actual.getPermissionGroup()))
            .satisfies(e -> assertThat(e.getPermission()).as("check permission").isEqualTo(actual.getPermission()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPermissionMasterUpdatableRelationshipsEquals(PermissionMaster expected, PermissionMaster actual) {
        assertThat(expected)
            .as("Verify PermissionMaster relationships")
            .satisfies(e -> assertThat(e.getRevAuxUser()).as("check revAuxUser").isEqualTo(actual.getRevAuxUser()));
    }
}
